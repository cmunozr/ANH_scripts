tosave = covbk$Cobertura
for(i in 1:length(unique(covbk$Cobertura))){
similar <- unique(covbk$Cobertura)[agrep(unique(covbk$Cobertura)[i], unique(covbk$Cobertura), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(covbk$Cobertura)[i])] <- similar[1]
}
}
}
covbk$Cobertura <- tosave %>% as.factor()
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
strsplit(",") %>% unlist() # c("decimalLat","decimalLon")
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
strsplit(",") %>% unlist() #c("Plataf","Red.Hidrica","Orden")
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
strsplit(",") %>% unlist() #c("Dis_CP","Dis_Oleodu", "Dis_Pozo","Dis_Pozact","Dis_Ferroc","Dis_ViaPri","Dia_ViaSec")
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res #c("Dis_Cienag","Dis_MGSG")#, "DisBosque","Dis_CobNat","Tam_Parche")
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
if(which(names(covbk) == "Tipo" | names(covbk) == "GrupoBiolo") != 0){
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
}
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
tosave = covbk$Cobertura
for(i in 1:length(unique(covbk$Cobertura))){
similar <- unique(covbk$Cobertura)[agrep(unique(covbk$Cobertura)[i], unique(covbk$Cobertura), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(covbk$Cobertura)[i])] <- similar[1]
}
}
}
covbk$Cobertura <- tosave %>% as.factor()
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
strsplit(",") %>% unlist() %>% as.numeric() # c(1,2,3,5,6,7,8,18,19)
by = dlgInput("New names for columns (separe by comma)")$res %>%
strsplit(",") %>% unlist() # c('parentEventID','Plataf','Temp','OxgD','Cond','Pgras','Mflot','Vrip','Cdos')
names(CovM)[where]<- by
}
exists("where")
!exists("where")
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
strsplit(",") %>% unlist() %>% as.numeric() # c(1,2,3,5,6,7,8,18,19)
by = dlgInput("New names for columns (separe by comma)")$res %>%
strsplit(",") %>% unlist() # c('parentEventID','Plataf','Temp','OxgD','Cond','Pgras','Mflot','Vrip','Cdos')
}
names(CovM)[where]<- by
}
names(CovM)[where]
log10
reprex:::reprex_addin()
CovM$Log_Cond <- log10(CovM$Cond)
CovM$Cond
CovM
CovM$Cond
CovM$Cond
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
CovM
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
strsplit(",") %>% unlist() %>% as.numeric() # c(1,2,3,5,6,7,8,18,19)
by = dlgInput("New names for columns (separe by comma)")$res %>%
strsplit(",") %>% unlist() # c('parentEventID','Plataf','Temp','OxgD','Cond','Pgras','Mflot','Vrip','Cdos')
}
names(CovM)[where]<- by
}
CovM$Cond
CovM$Log_Cond <- log10(CovM$` Cond`)
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
strsplit(",") %>% unlist() %>% as.numeric() # c(1,2,3,5,6,7,8,18,19)
by = dlgInput("New names for columns (separe by comma)")$res %>%
strsplit(",") %>% unlist() # c('parentEventID','Plataf','Temp','OxgD','Cond','Pgras','Mflot','Vrip','Cdos')
}
names(CovM)[where]<- by
}
CovM$ Cond
source(file.path(getwd(), "R", "Setup.R"))
do.install(rqurd = vector.rqurd)
working_taxon <- dlgInput("Taxon to work")$res
WDobjects <- do.folderStructure(taxon = working_taxon)
WDIn <- WDobjects$WDIn
WDIn2 <-  WDobjects$WDIn2
WDCov <- WDobjects$WDCov
WDOut <- WDobjects$WDOut
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
tosave = covbk$Cobertura
for(i in 1:length(unique(covbk$Cobertura))){
similar <- unique(covbk$Cobertura)[agrep(unique(covbk$Cobertura)[i], unique(covbk$Cobertura), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(covbk$Cobertura)[i])] <- similar[1]
}
}
}
covbk$Cobertura <- tosave %>% as.factor()
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
strsplit(", ") %>% unlist() # c("decimalLat","decimalLon")
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
strsplit(", ") %>% unlist() #c("Plataf","Red.Hidrica","Orden")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
strsplit(",") %>% unlist() %>% gsub("[[:space:]]", "")# c("decimalLat","decimalLon")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
strsplit(",") %>% unlist() %>% gsub(" ", "")# c("decimalLat","decimalLon")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
gsub(" ", "") %>% strsplit(",") %>% unlist() # c("decimalLat","decimalLon")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
strsplit(",") %>% unlist() # c("decimalLat","decimalLon")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% gsub(" ", "")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% gsub(pattern = " ", replacement = "")
spa.c
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
gsub(pattern = " ", replacement = "") %>% strsplit(", ") %>% unlist() # c("decimalLat","decimalLon")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
gsub(pattern = " ", replacement = "") %>% strsplit(",") %>% unlist() # c("decimalLat","decimalLon")
process_input <- function(input){
res_input <- input %>% gsub(pattern = " ", replacement = "") %>%
strsplit(",") %>% unlist()
}
process_input
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
process_input() #c("Plataf","Red.Hidrica","Orden")
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #c("Dis_CP","Dis_Oleodu", "Dis_Pozo","Dis_Pozact","Dis_Ferroc","Dis_ViaPri","Dia_ViaSec")
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #c("Dis_Cienag","Dis_MGSG")#, "DisBosque","Dis_CobNat","Tam_Parche")
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
where
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # c(1,2,3,5,6,7,8,18,19)
by = dlgInput("New names for columns (separe by comma)")$res %>%
process_input() # c('parentEventID','Plataf','Temp','OxgD','Cond','Pgras','Mflot','Vrip','Cdos')
}
names(CovM)[where]<- by
}
by
where
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
names(CovM)
names(CovM)[c(3,4,5,13,17,18,19,20)]
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>% process_input()
v.msite <- names(CovM)[col_msite] # c(3,4,5,13,17,18,19,20)
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>% process_input()
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # c(3,4,5,13,17,18,19,20)
bool_aqu <- dlgInput("Is your working taxon an aquatic one?")$res %>% process_input()
bool_aqu <- dlgInput("Is your working taxon an aquatic one? (TRUE or FALSE")$res %>% process_input()
bool_aqu
if(bool_aqu == T){
covbk <- covbk %>% select(-Plataf) %>% inner_join(.,CovM,by="parentEventID")
}
'kpv'
ls()
catnm <- dlgInput("main factor for analisis")$res %>% process_input() #"Orden"
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() #"Orden"
gnm <- dlgInput("Group prefix")$res %>% process_input() #"Pec" #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
#2b) get raw data
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
WDIn2
#2b) get raw data
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=2, startRow = 1, na.strings = "N/A")
unique(Data.e$samplingProtocol)
names(Data.e)
tosave = Data.e$samplingProtocol
for(i in 1:length(unique(Data.e$samplingProtocol))){
similar <- unique(Data.e$samplingProtocol)[agrep(unique(Data.e$samplingProtocol)[i], unique(Data.e$samplingProtocol), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(Data.e$samplingProtocol)[i])] <- similar[1]
}
}
}
Data.e$samplingProtocol <- tosave %>% as.factor()
Data.e$samplingProtocol
#2b) get raw data
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=2, startRow = 1, na.strings = "N/A")
Data.e$samplingProtocol
###this applies for fish ###
unique(ata.e$samplingProtocol)
###this applies for fish ###
unique(data.e$samplingProtocol)
###this applies for fish ###
unique(Data.e$samplingProtocol)
tosave = Data.e$samplingProtocol
for(i in 1:length(unique(Data.e$samplingProtocol))){
similar <- unique(Data.e$samplingProtocol)[agrep(unique(Data.e$samplingProtocol)[i], unique(Data.e$samplingProtocol), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(Data.e$samplingProtocol)[i])] <- similar[1]
}
}
}
Data.e$samplingProtocol <- tosave %>% as.factor()
Data.e$samplingProtocol
homolog_factors <- function(database, column, max.distance){
cats = database[, column]
tosave = database[, column]
for(i in 1:length(unique(cats))){
similar <- unique(cats)[agrep(unique(cats)[i], unique(cats), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(tosave)[i])] <- similar[1]
}
}
}
return(tosave)
}
process_input <- function(input){
res_input <- input %>% gsub(pattern = " ", replacement = "") %>%
strsplit(",") %>% unlist()
}
homolog_factors <- function(database, column, max.distance){
cats = database[, column]
tosave = database[, column]
for(i in 1:length(unique(cats))){
similar <- unique(cats)[agrep(unique(cats)[i], unique(cats), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(tosave)[i])] <- similar[1]
}
}
}
return(tosave)
}
homolog_factors <- function(database, column, max.distance){
cats = database[, column]
tosave = database[, column]
for(i in 1:length(unique(cats))){
similar <- unique(cats)[agrep(unique(cats)[i], unique(cats), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(tosave)[i])] <- similar[1]
}
}
}
return(as.factor(tosave))
}
process_input <- function(input){
res_input <- input %>% gsub(pattern = " ", replacement = "") %>%
strsplit(",") %>% unlist()
}
homolog_factors <- function(database, column, max.distance){
cats = database[, column]
tosave = database[, column]
for(i in 1:length(unique(cats))){
similar <- unique(cats)[agrep(unique(cats)[i], unique(cats), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(tosave)[i])] <- similar[1]
}
}
}
return(as.factor(tosave))
}
source(file.path(getwd(), "R", "Setup.R"))
do.install(rqurd = vector.rqurd)
working_taxon <- dlgInput("Taxon to work")$res
WDobjects <- do.folderStructure(taxon = working_taxon)
WDIn <- WDobjects$WDIn
WDIn2 <-  WDobjects$WDIn2
WDCov <- WDobjects$WDCov
WDOut <- WDobjects$WDOut
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
homolog_factors <- function(database, column, max.distance = 0.2){
cats = database[, column]
tosave = database[, column]
for(i in 1:length(unique(cats))){
similar <- unique(cats)[agrep(unique(cats)[i], unique(cats), max.distance = 0.2)] %>%
stri_trans_general(id = "Latin-ASCII")
if(length(similar) > 1){
for(j in 1:length(similar)){
tosave[which(tosave == unique(tosave)[i])] <- similar[1]
}
}
}
return(as.factor(tosave))
}
homolog_factors(covbk, "Cobertura")
covbk$Cobertura <- homolog_factors(covbk, "Cobertura")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
process_input() #c("Plataf","Red.Hidrica","Orden")
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #c("Dis_CP","Dis_Oleodu", "Dis_Pozo","Dis_Pozact","Dis_Ferroc","Dis_ViaPri","Dia_ViaSec")
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #c("Dis_Cienag","Dis_MGSG")#, "DisBosque","Dis_CobNat","Tam_Parche")
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # c(1,2,3,5,6,7,8,18,19)
by = dlgInput("New names for columns (separe by comma)")$res %>%
process_input() # c('parentEventID','Plataf','Temp','OxgD','Cond','Pgras','Mflot','Vrip','Cdos')
}
names(CovM)[where]<- by
}
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # c(3,4,5,13,17,18,19,20)
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>% process_input()
if(bool_aqu == T){
covbk <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() #"Orden"
gnm <- dlgInput("Group prefix")$res %>% process_input() #"Pec" #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
#2b) get raw data
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=2, startRow = 1, na.strings = "N/A")
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
names(Data.e)
#2b) get raw data
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=2, startRow = 1, na.strings = "N/A")
Data.e
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
names(Data.e)[2]
Data.e$samplingEffort
names(Data.e)[2]
names(Data.e)
#2b) get raw data
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
exists(names(Data.e)['parentEventID'])
names(Data.e)['parentEventID']
names(Data.e)
colnames(Data.e)
colnames(Data.e)['parentEventID']
grep(pattern = 'parentEventID', colnames(Data.e))
grepl(pattern = 'parentEventID', colnames(Data.e))
sum(grepl(pattern = 'parentEventID', colnames(Data.e)))
sum(grepl(pattern = 'parentEventId', colnames(Data.e))
)
likely <- Data.e[, "basisOfRecord"] %>% strsplit(likely) %>% unlist()
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 1, na.strings = "N/A")
Data.e$samplingProtocol
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol<-'VES'
}
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
sum(grepl(pattern = 'basisOfRecord', colnames(Data.e))) != 0
grepl(pattern = 'basisOfRecord', colnames(Data.e))
colnames(Data.e)
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
grepl(pattern = 'parentEventID', colnames(Data.e))
colnames(Data.e)
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 1, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 1, na.strings = "N/A")
colnames(Data.e)
file.path(WDIn2,"I2D-BIO_2021_056.xlsx")
file.path(WDIn2,"I2D-BIO_2021_056.xlsx")
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
colnames(Data.e)
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
names(Data.e)[2] <- 'parentEventID'
}
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>% process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol<-'VES'
}
Data.e$samplingProtocol
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol
bool_herp == T
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
bool_herp == T
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
Data.e$samplingProtocol
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
colnames(Data.e)
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")

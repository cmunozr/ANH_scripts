names(Data.e)[2] <- 'parentEventID'
}
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>% process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol<-'VES'
}
Data.e$samplingProtocol
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol
bool_herp == T
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
bool_herp == T
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
Data.e$samplingProtocol
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
colnames(Data.e)
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetou species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=1, startRow = 2, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_056_1.xlsx"), sheet=2, startRow = 2, na.strings = "N/A")
source(file.path(getwd(), "R", "Setup.R"))
do.install(rqurd = vector.rqurd)
working_taxon <- dlgInput("Taxon to work")$res
WDobjects <- do.folderStructure(taxon = working_taxon)
WDIn <- WDobjects$WDIn
WDIn2 <-  WDobjects$WDIn2
WDCov <- WDobjects$WDCov
WDOut <- WDobjects$WDOut
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
covbk$Cobertura <- homolog_factors(covbk, "Cobertura")
source(file.path(getwd(), "R", "Miscelanea.R"))
covbk$Cobertura <- homolog_factors(covbk, "Cobertura")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
process_input() #c("Plataf","Red.Hidrica","Orden")
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #c("Dis_CP","Dis_Oleodu", "Dis_Pozo","Dis_Pozact","Dis_Ferroc","Dis_ViaPri","Dia_ViaSec")
v.pres
cat.c
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #c("Dis_Cienag","Dis_MGSG")#, "DisBosque","Dis_CobNat","Tam_Parche")
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma)")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma)")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma)")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma)")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
names(CovM)[where]<- by
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # 3,4,5,13,17,18,19,20
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>% process_input()
if(bool_aqu == T){
covbk <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}
load("C:/ANH_scripts/.RData")
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() #"Orden"
do.install(rqurd = vector.rqurd)
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() #"Orden"
gnm <- dlgInput("Group prefix")$res %>% process_input() #"Pec" #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
StartRow <- dlgInput("In which row the information start inside the database ")$res %>% process_input() # 1
StartRow <- dlgInput("In which row the information start inside the database (numeric) ")$res %>% process_input() # 1
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = StartRow, na.strings = "N/A")
StartRow <- dlgInput("In which row the information start inside the database (numeric) ")$res %>% process_input() %>%
as.numeric() # 1
Data.e<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2,"I2D-BIO_2021_049_v2.xlsx"), sheet=2, startRow = StartRow, na.strings = "N/A")
DataBaseName <- "I2D-BIO_2021_049_v2.xlsx"
Data.e<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=2, startRow = StartRow, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetous species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
Data.e$samplingProtocol
Data.e<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=2, startRow = StartRow, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetous species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol
unique(Data.e$samplingProtocol)
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
grepl(pattern = 'parentEventID', colnames(Data.e))) == 0
grepl(pattern = 'parentEventID', colnames(Data.e))) == 0)
grepl(pattern = 'parentEventID', colnames(Data.e))
(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0)
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>% process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e$samplingEffort[is.na(Data.e$samplingEffort)] <- 0
Data.r$parentEventID <- gsub(pattern = "^(ANH_[0-9]+)(_.*[C|D])$", replacement = "\\1", Data.r$eventID)
Data.r$parentEventID
unique(Data.r$parentEventID)
UM <- unique(Data.r$parentEventID)
Data.r$scientificName_2 <- trimws(Data.r$scientificName)
Data.r$scientificName_2
Data.r$scientificName_2 <- trimws(Data.r$scientificName)
selrnm <- !is.na(Data.r$identificationQualifier)
Data.r$scientificName_2[selrnm]<-paste(Data.r$scientificName[selrnm],trimws(Data.r$identificationQualifier[selrnm]))
unique(Data.r$scientificName_2)
Data.r$scientificName_2
# quité las columnas que no se pueden completar desde BD_eventos o que no son necesarias en el análisis
Data.r <- complete_cols(Data.r, Data.e,  "parentEventID", c("eventID","parentEventID",
"samplingProtocol",
"habitat"
))
View(Data.r)
View(Data.r)
Data.r$samplingProtocol <- trimws(Data.r$samplingProtocol)
Data.r$habitat<-trimws(Data.r$habitat)
Data.r$organismQuantity<-as.numeric(Data.r$organismQuantity)
cnm.smp
Data.r$samplingProtocol
a <- read.csv("Analisis/Datos_Finales/I2D-BIO_2021_049_v2.xlsx")
a <- read.xlsx("Analisis/Datos_Finales/I2D-BIO_2021_049_v2.xlsx")
b <- read.xlsx("Analisis/Datos_Finales/I2D-BIO_2021_056.xlsx")
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit()
View(samEff.t)
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>% regexpr("[[:digit:]]+")
gregexpr("[[:digit:]]+", samEff.t$samplingEffort)
regexpr("[[:digit:]]+", samEff.t$samplingEffort)
View(samEff.t)
regexpr(pattern = "[[:digit:]]+", text = samEff.t$samplingEffort)
regexpr(pattern = "[[:digit:]]+", text = samEff.t$samplingEffort[[1]])
regmatches(samEff.t$samplingEffort, regexpr(pattern = "[[:digit:]]+", samEff.t$samplingEffort))
regmatches(samEff.t$samplingEffort, regexpr(pattern = "[[:digit:]]+", a$samplingEffort))
regmatches(samEff.t$samplingEffort, regexpr(pattern = "[[:digit:]]+", b$samplingEffort))
a <- c("40.3 seconds", "21.4 minutes")
regmatches(a, regexpr(pattern = "[[:digit:]]+", a))
regmatches(a, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", a))
a <- c("40 seconds", "22 minutes")
regmatches(a, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", a))
a <- c("3,5 seconds", "2,2 minutes")
regmatches(a, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", a))
a <- c("3,5 seconds", "2,2 minutes")
regmatches(a, regexpr(pattern = "[-+]?[0-9]*\\.|\\,?[0-9]+([eE][-+]?[0-9]+)?", a))
regmatches(a, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", a))
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
samEff.t$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", b$samplingEffort)))) %>%
group_by(parentEventID,get(cnm.smp[2]))%>%summarize(samplEff=sum(samplEff), Num_ev=n())
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
samEff.t$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", samEff.t$samplingEffort)))) %>%
group_by(parentEventID,get(cnm.smp[2]))%>%summarize(samplEff=sum(samplEff), Num_ev=n())
View(samEff.t)
colnames(samEff.t)[1:2]<-c('parentEventID',cnm.smp[2])
sameEff.tt<-split(samEff.t,as.factor(samEff.t$samplingProtocol))
samEff.ttt<-map(sameEff.tt, function(x) data.frame(as.data.frame(x),decostand(as.vector(x[,"samplEff"]),"max")))
kpv<-c(kpv,'samEff.ttt','Data.e','Data.r','UM')
rm(list=ls()[!ls()%in%kpv])
ommt
ommt <- dlgInput("Are there methods to be omitted")$res %>% process_input() # Recorrido en lancha, Recorrido Libre
ommt <- dlgInput("Are there methods to be omitted")$res %>% process_input() # Recorrido en lancha, Recorrido Libre
Data.r$samplingProtocol
unique(Data.r$samplingProtocol)
View(process_input)
View(process_input)
process_input <- function(input, spaces){
res_input <- input %>% strsplit(",") %>% unlist()
if(spaces == FALSE){
gsub(x = res_input, pattern = " ", replacement = "")
}
}
process_input <- function(input, spaces = F){
res_input <- input %>% strsplit(",") %>% unlist()
if(spaces == FALSE){
gsub(x = res_input, pattern = " ", replacement = "")
}
}
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T) # Recorrido en lancha, Recorrido Libre
process_input <- function(input, spaces = F){
input_string <- input %>% strsplit(",") %>% unlist() %>% trimws()
if(spaces == FALSE){
res_input <- gsub(x = res_input, pattern = " ", replacement = "")
}else{
res_input <- input_string
}
}
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T) # Recorrido en lancha, Recorrido Libre
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T) # Recorrido en lancha, Recorrido Libre
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T) # Recorrido en lancha, Recorrido Libre
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T)
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
process_input <- function(input, spaces = F){
input_string <- input %>% strsplit(",") %>% unlist() %>% trimws()
if(spaces == FALSE){
res_input <- gsub(x = input_string, pattern = " ", replacement = "")
}else{
res_input <- input_string
}
}
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
Data.r2<-Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T)
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T)
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T)
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
if(exists("ommt")| exists("ompv")){
if(length(ommt) != 0  | length(ompv) != 0) {
Data.r2 <- Data.r %>% filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
}
}
unique(Data.r$samplingProtocol)
nsp <- unique(Data.r2$parentEventID)
nsp
nsp <- length(!nsp%in%ompv)
ompv
nsp <- unique(Data.r2$parentEventID)
nsp
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
ompv
nsp <- unique(Data.r2$parentEventID)
!nsp %in% ompv
ompv
unique(Data.r2$parentEventID)
!nsp
!nsp %in% ompv
length(!nsp %in% ompv)
Data.ee.r<-Data.r2%>%
select(parentEventID,organismQuantity,samplingProtocol,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity,
values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,3:(nsp+2)]),.keep="unused")%>%
select(scientificName_2,samplingProtocol,TotAbu)%>%
pivot_wider(names_from=samplingProtocol,values_from=TotAbu, values_fn=sum,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")%>%as.list(.)
nsp <- unique(Data.r2$parentEventID)
nsp <- length(!nsp %in% ompv)
Data.ee.r<-Data.r2%>%
select(parentEventID,organismQuantity,samplingProtocol,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity,
values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,3:(nsp+2)]),.keep="unused")%>%
select(scientificName_2,samplingProtocol,TotAbu)%>%
pivot_wider(names_from=samplingProtocol,values_from=TotAbu, values_fn=sum,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")%>%as.list(.)
Hill.r <- iNEXT(Data.ee.r,q=c(0,1,2),datatype = "abundance")
PrintggiNext(paste(gnm,'_abM',sep=''), Hill.r)
source(file.path(getwd(), "R", "GraphicalFunctions.R"))
source(file.path(getwd(), "R", "Miscelanea.R"))
PrintggiNext(paste(gnm,'_abM',sep=''), Hill.r)
kpv <- c(kpv,'Hill.r')
rm(list=ls()[!ls()%in%kpv])
ommt <- c("")
ompv <- c("")
Data.r2 <- Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
Data.ii.r <- Data.r2%>%
select(parentEventID,organismQuantity,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate_if(is.numeric,~1*(.>0))%>%column_to_rownames(.,var="scientificName_2")%>%list(.)
Hill.rr<-iNEXT(Data.ii.r,q=c(0,1,2),datatype = "incidence_raw")
names(Hill.rr$iNextEst)<-"Regional"
PrintggiNext(paste(gnm,'_incO',sep=''),Hill.rr)
source(file.path(getwd(), "R", "Setup.R"))
source(file.path(getwd(), "R", "Miscelanea.R"))
source(file.path(getwd(), "R", "GraphicalFunctions.R"))
source(file.path(getwd(), "R", "Miscelanea.R"))
do.install(rqurd = vector.rqurd)
working_taxon <- dlgInput("Taxon to work")$res
WDobjects <- do.folderStructure(taxon = working_taxon)
WDIn <- WDobjects$WDIn
WDIn2 <-  WDobjects$WDIn2
WDCov <- WDobjects$WDCov
WDOut <- WDobjects$WDOut
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
covbk$Cobertura <- homolog_factors(covbk, "Cobertura")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>% process_input()
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
process_input() #Plataf, Red.Hidrica, Orden
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #Dis_CP, Dis_Oleodu, Dis_Pozo, Dis_Pozact, Dis_Ferroc, Dis_ViaPri, Dia_ViaSec
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #Dis_Cienag, Dis_MGSG #DisBosque, Dis_CobNat, Tam_Parche
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'), sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma). Must match with number of columns position.")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # 3,4,5,13,17,18,19,20
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>% process_input()
if(bool_aqu == T){
covbk <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() # Orden
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() # Orden
gnm <- dlgInput("Group prefix")$res %>% process_input() # Pec #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
StartRow <- dlgInput("In which row the information start inside the database (numeric) ")$res %>% process_input() %>%
as.numeric() # 1
DataBaseName <- "I2D-BIO_2021_049_v2.xlsx"
Data.e<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=2, startRow = StartRow, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetous species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>% process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e$samplingEffort[is.na(Data.e$samplingEffort)] <- 0
Data.r$parentEventID <- gsub(pattern = "^(ANH_[0-9]+)(_.*[C|D])$", replacement = "\\1", Data.r$eventID)
UM <- unique(Data.r$parentEventID)
Data.r$scientificName_2 <- trimws(Data.r$scientificName)
selrnm <- !is.na(Data.r$identificationQualifier)
Data.r$scientificName_2[selrnm] <- paste(Data.r$scientificName[selrnm],trimws(Data.r$identificationQualifier[selrnm]))
unique(Data.r$scientificName_2)
# Complete columns of individual registers using event data
Data.r <- complete_cols(Data.r, Data.e,  "parentEventID", c("eventID","parentEventID",
"samplingProtocol",
"habitat"
))
Data.r$samplingProtocol <- trimws(Data.r$samplingProtocol)
Data.r$habitat<-trimws(Data.r$habitat)
Data.r$organismQuantity<-as.numeric(Data.r$organismQuantity)
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
samEff.t$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", samEff.t$samplingEffort)))) %>%
group_by( parentEventID, get(cnm.smp[2]) ) %>% summarize( samplEff = sum(samplEff), Num_ev = n() )
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
Data.e$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", Data.e$samplingEffort)))) %>%
group_by( parentEventID, get(cnm.smp[2]) ) %>% summarize( samplEff = sum(samplEff), Num_ev = n() )
colnames(samEff.t)[1:2]<-c('parentEventID',cnm.smp[2])
sameEff.tt<-split(samEff.t,as.factor(samEff.t$samplingProtocol))
samEff.ttt<-map(sameEff.tt, function(x) data.frame(as.data.frame(x),decostand(as.vector(x[,"samplEff"]),"max")))
kpv <- c(kpv,'samEff.ttt','Data.e','Data.r','UM')
rm(list = ls()[!ls() %in% kpv] )
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T)
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
if(exists("ommt")| exists("ompv")){
if(length(ommt) != 0  | length(ompv) != 0) {
Data.r2 <- Data.r %>% filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
}
}
unique(Data.r$samplingProtocol)
nsp <- unique(Data.r2$parentEventID)
nsp <- length(!nsp %in% ompv)
Data.ee.r<-Data.r2%>%
select(parentEventID,organismQuantity,samplingProtocol,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity,
values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,3:(nsp+2)]),.keep="unused")%>%
select(scientificName_2,samplingProtocol,TotAbu)%>%
pivot_wider(names_from=samplingProtocol,values_from=TotAbu, values_fn=sum,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")%>%as.list(.)
Hill.r <- iNEXT(Data.ee.r,q=c(0,1,2),datatype = "abundance")
PrintggiNext(paste(gnm,'_abM',sep=''), Hill.r)
kpv <- c(kpv,'Hill.r')
rm(list=ls()[!ls()%in%kpv])
Data.r2 <- Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
ompv
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
Data.r2 <- Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
ommt <- ""
omv <- ""
Data.r2 <- Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
Data.ii.r <- Data.r2%>%
select(parentEventID,organismQuantity,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate_if(is.numeric,~1*(.>0))%>%column_to_rownames(.,var="scientificName_2")%>%list(.)
Hill.rr<-iNEXT(Data.ii.r,q=c(0,1,2),datatype = "incidence_raw")
names(Hill.rr$iNextEst)<-"Regional"
PrintggiNext(paste(gnm,'_incO',sep=''),Hill.rr)
kpv<-c(kpv,'Hill.rr')
rm(list=ls()[!ls()%in%kpv])
ommt <- dlgInput("Are there methods to be omitted?")$res %>% process_input(spaces = T)
# Recorrido en lancha, Recorrido Libre
ompv <- dlgInput("Are there sample events to be omitted?")$res %>% process_input() # ANH_380, ANH_64, ANH_65)
if(exists("ommt")| exists("ompv")){
if(length(ommt) != 0  | length(ompv) != 0) {
Data.r2 <- Data.r %>% filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
}
}
unique(Data.r$samplingProtocol)
nsp <- unique(Data.r2$parentEventID)
nsp <- length(!nsp %in% ompv)
Data.ee.r<-Data.r2%>%
select(parentEventID,organismQuantity,samplingProtocol,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity,
values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,3:(nsp+2)]),.keep="unused")%>%
select(scientificName_2,samplingProtocol,TotAbu)%>%
pivot_wider(names_from=samplingProtocol,values_from=TotAbu, values_fn=sum,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")%>%as.list(.)
Hill.r <- iNEXT(Data.ee.r,q=c(0,1,2),datatype = "abundance")
PrintggiNext(paste(gnm,'_abM',sep=''), Hill.r)
kpv <- c(kpv,'Hill.r')
rm(list=ls()[!ls()%in%kpv])

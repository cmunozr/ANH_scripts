renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma). Must match with number of columns position.")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
names(CovM)
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # 3,4,5,13,17,18,19,20
v.msite
col_msite
names(CovM)
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # 3,4,5,13,17,18,19,20
v.msite
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>% process_input()
if(bool_aqu == T){
cov <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}else{
cov <- Covbk
}
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>% process_input()
if(bool_aqu == T){
cov <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}else{
cov <- covbk
}
names(cov)
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() # Orden
gnm <- dlgInput("Group prefix")$res %>% process_input() # Pec #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
StartRow <- dlgInput("In which row the information start inside the database (numeric) ")$res %>% process_input() %>%
as.numeric() # 1
DataBaseName <- "I2D-BIO_2021_049_v2.xlsx"
Data.e<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=2, startRow = StartRow, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetous species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
# # reconcile names of sampling protocol and change to factors
unique(Data.e$samplingProtocol)
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>% process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e$samplingEffort[is.na(Data.e$samplingEffort)] <- 0
# Clean event_ID cell and paste to Data.r base
Data.r$parentEventID <- gsub(pattern = "^(ANH_[0-9]+)(_.*[C|D])$", replacement = "\\1", Data.r$eventID)
UM <- unique(Data.r$parentEventID)
Data.r$scientificName_2 <- trimws(Data.r$scientificName)
selrnm <- !is.na(Data.r$identificationQualifier)
Data.r$scientificName_2[selrnm] <- paste(Data.r$scientificName[selrnm],trimws(Data.r$identificationQualifier[selrnm]))
# Complete columns of individual registers using event data
Data.r <- complete_cols(Data.r, Data.e,  "parentEventID", c("eventID","parentEventID",
"samplingProtocol",
"habitat"
))
Data.r$samplingProtocol <- trimws(Data.r$samplingProtocol)
Data.r$habitat<-trimws(Data.r$habitat)
Data.r$organismQuantity<-as.numeric(Data.r$organismQuantity)
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
Data.e$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", Data.e$samplingEffort)))) %>%
group_by( parentEventID, get(cnm.smp[2]) ) %>% summarize( samplEff = sum(samplEff), Num_ev = n() )
colnames(samEff.t)[1:2]<-c('parentEventID',cnm.smp[2])
sameEff.tt<-split(samEff.t,as.factor(samEff.t$samplingProtocol))
samEff.ttt<-map(sameEff.tt, function(x) data.frame(as.data.frame(x),decostand(as.vector(x[,"samplEff"]),"max")))
kpv <- c(kpv,'samEff.ttt','Data.e','Data.r','UM')
rm(list = ls()[!ls() %in% kpv] )
View(cov)
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
Data.r2 <- Data.r %>% filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
nsp <- unique(Data.r2$parentEventID)
nsp <- length(!nsp %in% ompv)
Data.ee.r<-Data.r2%>%
select(parentEventID,organismQuantity,samplingProtocol,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity,
values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,3:(nsp+2)]),.keep="unused")%>%
select(scientificName_2,samplingProtocol,TotAbu)%>%
pivot_wider(names_from=samplingProtocol,values_from=TotAbu, values_fn=sum,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")%>%as.list(.)
Hill.r <- iNEXT(Data.ee.r,q=c(0,1,2),datatype = "abundance")
PrintggiNext(paste(gnm,'_abM',sep=''), Hill.r)
kpv <- c(kpv,'Hill.r')
rm(list=ls()[!ls()%in%kpv])
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
Data.r2 <- Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
Data.ii.r <- Data.r2%>%
select(parentEventID,organismQuantity,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate_if(is.numeric,~1*(.>0))%>%column_to_rownames(.,var="scientificName_2")%>%list(.)
Hill.rr<-iNEXT(Data.ii.r,q=c(0,1,2),datatype = "incidence_raw")
names(Hill.rr$iNextEst) <- "Regional"
PrintggiNext(paste(gnm,'_incO',sep=''),Hill.rr)
kpv <- c(kpv,'Hill.rr')
rm(list=ls()[!ls()%in%kpv])
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
names(cov)
[names(cov)==catnm]
names(cov)==catnm
names(cov)[names(cov)==catnm]
names(cov)[names(cov)==catnm]<-'categ'
names(cov)[names(cov)==catnm]
names(cov)
Data.r2<-Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
View(Data.r2)
Data.a.f<-function(catnm = catnm,cov = cov, ompv = ompv, ommt= ommt){
names(cov)[names(cov)==catnm]<-'categ'
Data.r2<-Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
nsp<-unique(Data.r2$parentEventID)
cov.1<-cov%>%select(parentEventID,categ)%>%distinct(parentEventID,.keep_all=T)%>%
filter(parentEventID%in%nsp)
nsp<-length(nsp[!nsp%in%ompv])
Data.ee.o<-Data.r2%>%
select(parentEventID,samplingProtocol,organismQuantity,scientificName_2)%>%
inner_join(.,cov.1, by="parentEventID")%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,4:(nsp+3)]),.keep="unused")%>%
select(categ,samplingProtocol,scientificName_2,TotAbu)%>%
group_split(samplingProtocol)
names(Data.ee.o)<-levels(as.factor(Data.r2$samplingProtocol))
Data.ee.oo<-map(Data.ee.o, function(x){
y<-x%>%select(categ,scientificName_2,TotAbu)%>%
pivot_wider(names_from=categ,values_from=TotAbu,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")
})
+  return(Data.ee.oo)
}
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
Data.r2<-Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
nsp<-unique(Data.r2$parentEventID)
cov.1<-cov%>%select(parentEventID,categ)%>%distinct(parentEventID,.keep_all=T)%>%
filter(parentEventID%in%nsp)
nsp<-length(nsp[!nsp%in%ompv])
Data.ee.o<-Data.r2%>%
select(parentEventID,samplingProtocol,organismQuantity,scientificName_2)%>%
inner_join(.,cov.1, by="parentEventID")%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,4:(nsp+3)]),.keep="unused")%>%
select(categ,samplingProtocol,scientificName_2,TotAbu)%>%
group_split(samplingProtocol)
names(Data.ee.o)<-levels(as.factor(Data.r2$samplingProtocol))
Data.ee.oo<-map(Data.ee.o, function(x){
y<-x%>%select(categ,scientificName_2,TotAbu)%>%
pivot_wider(names_from=categ,values_from=TotAbu,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")
})
return(Data.ee.oo)
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
rlang:last_error()
rlang::last_error()
source(file.path(getwd(), "R", "Setup.R"))
source(file.path(getwd(), "R", "MethodFunctions.R"))
source(file.path(getwd(), "R", "GraphicalFunctions.R"))
source(file.path(getwd(), "R", "Miscelanea.R"))
do.install(rqurd = vector.rqurd)
working_taxon <- dlgInput("Taxon to work")$res
WDobjects <- do.folderStructure(taxon = working_taxon)
WDIn <- WDobjects$WDIn
WDIn2 <-  WDobjects$WDIn2
WDCov <- WDobjects$WDCov
WDOut <- WDobjects$WDOut
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
covbk$Cobertura <- homolog_factors(covbk, "Cobertura")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
process_input()
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
process_input() #Plataf, Red.Hidrica, Orden
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #Dis_CP, Dis_Oleodu, Dis_Pozo, Dis_Pozact, Dis_Ferroc, Dis_ViaPri, Dia_ViaSec
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #Dis_CP, Dis_Oleodu, Dis_Pozo, Dis_Pozact, Dis_Ferroc, Dis_ViaPri,
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #Dis_Cienag, Dis_MGSG #DisBosque, Dis_CobNat, Tam_Parche
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'),
sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma). Must match with number of columns position.")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # 3,4,5,13,17,18,19,20
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>%
process_input()
if(bool_aqu == T){
cov <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}else{
cov <- covbk
}
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() # Orden
gnm <- dlgInput("Group prefix")$res %>% process_input() # Pec #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
StartRow <- dlgInput("In which row the information start inside the database (numeric) ")$res %>% process_input() %>%
as.numeric() # 1
StartRow <- dlgInput("In which row, does the database start (numeric)? ")$res %>%
process_input() %>%
as.numeric() # 1
DataBaseName <- "I2D-BIO_2021_049_v2.xlsx"
Data.e<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=2, startRow = StartRow, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetous species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
# # reconcile names of sampling protocol and change to factors
unique(Data.e$samplingProtocol)
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
Data.e$samplingProtocol
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>% process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e$samplingEffort[is.na(Data.e$samplingEffort)] <- 0
# Clean event_ID cell and paste to Data.r base
Data.r$parentEventID <- gsub(pattern = "^(ANH_[0-9]+)(_.*[C|D])$", replacement = "\\1", Data.r$eventID)
UM <- unique(Data.r$parentEventID)
Data.r$scientificName_2 <- trimws(Data.r$scientificName)
selrnm <- !is.na(Data.r$identificationQualifier)
Data.r$scientificName_2[selrnm] <- paste(Data.r$scientificName[selrnm],trimws(Data.r$identificationQualifier[selrnm]))
# Complete columns of individual registers using event data
Data.r <- complete_cols(Data.r, Data.e,  "parentEventID", c("eventID","parentEventID",
"samplingProtocol",
"habitat"
))
Data.r$samplingProtocol <- trimws(Data.r$samplingProtocol)
Data.r$habitat<-trimws(Data.r$habitat)
Data.r$organismQuantity<-as.numeric(Data.r$organismQuantity)
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
Data.e$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", Data.e$samplingEffort)))) %>%
group_by( parentEventID, get(cnm.smp[2]) ) %>% summarize( samplEff = sum(samplEff), Num_ev = n() )
colnames(samEff.t)[1:2]<-c('parentEventID',cnm.smp[2])
sameEff.tt<-split(samEff.t,as.factor(samEff.t$samplingProtocol))
samEff.ttt<-map(sameEff.tt, function(x) data.frame(as.data.frame(x),decostand(as.vector(x[,"samplEff"]),"max")))
samEff.ttt
samEff.t
rm(list = ls()[!ls() %in% kpv] )
clear <- clear_meth_events()
kpv <- c(ls(),'kpv') #variables to keep all the time
source(file.path(getwd(), "R", "Setup.R"))
source(file.path(getwd(), "R", "MethodFunctions.R"))
source(file.path(getwd(), "R", "GraphicalFunctions.R"))
source(file.path(getwd(), "R", "Miscelanea.R"))
do.install(rqurd = vector.rqurd)
working_taxon <- dlgInput("Taxon to work")$res
WDobjects <- do.folderStructure(taxon = working_taxon)
WDIn <- WDobjects$WDIn
WDIn2 <-  WDobjects$WDIn2
WDCov <- WDobjects$WDCov
WDOut <- WDobjects$WDOut
# read excel file of covariances
covbk <- read.xlsx((file.path(WDCov,"BDPuntosMuestreoMag1910.xlsx")))
# rename some covariables
covbk <- rename(covbk, 'parentEventID' = 'parentEven', 'CobSR' = 'Cobertura')
if(which(names(covbk) == "CobertXHabitat") != 0){
covbk <- rename(covbk, 'Cobertura' = 'CobertXHabitat')
covbk$Cobertura[is.na(covbk$Cobertura)]<-covbk$CobSR[is.na(covbk$Cobertura)]
}
covbk$Cobertura <- homolog_factors(covbk, "Cobertura")
# Spatial columns
spa.c <- dlgInput("Latitude and longitude columns name (separe by comma)")$res %>%
process_input()
# categoric columns
cat.c <- dlgInput("Column names of categorical covariables to work in the analysis (separe by comma)")$res %>%
process_input() #Plataf, Red.Hidrica, Orden
# human pressure vector
v.pres <- dlgInput("Column names of Human pressure covariables (separe by comma)")$res %>%
process_input() #Dis_CP, Dis_Oleodu, Dis_Pozo, Dis_Pozact, Dis_Ferroc, Dis_ViaPri,
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #Dis_Cienag, Dis_MGSG #DisBosque, Dis_CobNat, Tam_Parche
# environmnet vector
v.rec <- dlgInput("Column names of Environmental distance covariables (separe by comma)")$res %>%
process_input() #Dis_Cienag, Dis_MGSG #DisBosque, Dis_CobNat, Tam_Parche
names(covbk)[grep("[E|e]ven",names(covbk))] <- c('eventID','parentEventID')
covbk$parentEventID <- trimws(gsub("-", "_", covbk$parentEventID))
covbk$eventID <- trimws(gsub("-", "_", covbk$eventID))
covbk <- covbk %>% select(-c('Tipo', 'GrupoBiolo'))
CovM <- read.xlsx(file.path(WDCov,'variablesAmbientales_microH.xlsx'),
sheet = 1, startRow = 3 )
renameBool <- dlgInput("Do you want to rename Micro-Habitat variables? (TRUE or FALSE)")$res %>% as.logical()
if(renameBool == T){
if(!exists("where") | !exists("by")){
where = dlgInput("Position of columns to rename (separe by comma)")$res %>%
process_input() %>% as.numeric() # 1,2,3,5,6,7,8,18,19
by = dlgInput("New names for columns (separe by comma). Must match with number of columns position.")$res %>%
process_input() # parentEventID, Plataf, Temp, OxgD, Cond, Pgras, Mflot, Vrip, Cdos
}
names(CovM)[where]<- by
}
CovM$Log_Cond <- log10(CovM$Cond)
CovM[is.na(CovM)] <- 0
col_msite <- dlgInput("Position of covar columns to use inside the analysis (separe by comma)")$res %>%
process_input() %>% as.numeric()
v.msite <- names(CovM)[col_msite] # 3,4,5,13,17,18,19,20
bool_aqu <- dlgInput("Is your working taxon a fish or related? (TRUE or FALSE")$res %>%
process_input()
if(bool_aqu == T){
cov <- covbk %>% select(-Plataf) %>% inner_join(., CovM,by="parentEventID")
}else{
cov <- covbk
}
catnm <- dlgInput("Main factor for analisis")$res %>% process_input() # Orden
gnm <- dlgInput("Group prefix")$res %>% process_input() # Pec #group prefix
cnm.smp <- c("samplingEffort","samplingProtocol") #from data
kpv <- c(ls(),'kpv') #variables to keep all the time
StartRow <- dlgInput("In which row, does the database start (numeric)? ")$res %>%
process_input() %>% as.numeric() # 1
DataBaseName <- "I2D-BIO_2021_049_v2.xlsx"
Data.e<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=1, startRow = StartRow, na.strings = "N/A")
Data.r<-read.xlsx(file.path(WDIn2, DataBaseName), sheet=2, startRow = StartRow, na.strings = "N/A")
bool_herp <- dlgInput("Is your working taxon an herpetous species or related? (TRUE or FALSE)")$res %>% process_input()
if(bool_herp == T){
Data.e$samplingProtocol <- 'VES'
}
# # reconcile names of sampling protocol and change to factors
unique(Data.e$samplingProtocol)
Data.e$samplingProtocol <- homolog_factors(Data.e, "samplingProtocol")
if(sum(grepl(pattern = 'parentEventID', colnames(Data.e))) == 0){
col_parentEventID <- dlgInput("Type position column of 'parentEventID' (numeric)")$res %>%
process_input()
names(Data.e)[col_parentEventID] <- 'parentEventID'
}
Data.e$samplingEffort[is.na(Data.e$samplingEffort)] <- 0
# Clean event_ID cell and paste to Data.r base
Data.r$parentEventID <- gsub(pattern = "^(ANH_[0-9]+)(_.*[C|D])$", replacement = "\\1", Data.r$eventID)
UM <- unique(Data.r$parentEventID)
Data.r$scientificName_2 <- trimws(Data.r$scientificName)
selrnm <- !is.na(Data.r$identificationQualifier)
Data.r$scientificName_2[selrnm] <- paste(Data.r$scientificName[selrnm],trimws(Data.r$identificationQualifier[selrnm]))
# Complete columns of individual registers using event data
Data.r <- complete_cols(Data.r, Data.e,  "parentEventID", c("eventID","parentEventID",
"samplingProtocol",
"habitat"
))
Data.r$samplingProtocol <- trimws(Data.r$samplingProtocol)
Data.r$habitat<-trimws(Data.r$habitat)
Data.r$organismQuantity<-as.numeric(Data.r$organismQuantity)
samEff.t <- Data.e[,c('parentEventID', cnm.smp)] %>% na.omit() %>%
mutate(samplEff = as.numeric(
regmatches(
Data.e$samplingEffort, regexpr(pattern = "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?", Data.e$samplingEffort)))) %>%
group_by( parentEventID, get(cnm.smp[2]) ) %>% summarize( samplEff = sum(samplEff), Num_ev = n() )
colnames(samEff.t)[1:2]<-c('parentEventID',cnm.smp[2])
sameEff.tt<-split(samEff.t,as.factor(samEff.t$samplingProtocol))
samEff.ttt<-map(sameEff.tt, function(x) data.frame(as.data.frame(x),decostand(as.vector(x[,"samplEff"]),"max")))
kpv <- c(kpv,'samEff.ttt','Data.e','Data.r','UM')
rm(list = ls()[!ls() %in% kpv] )
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
Data.r2 <- Data.r %>% filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
nsp <- unique(Data.r2$parentEventID)
nsp <- length(!nsp %in% ompv)
Data.ee.r<-Data.r2%>%
select(parentEventID,organismQuantity,samplingProtocol,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity,
values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,3:(nsp+2)]),.keep="unused")%>%
select(scientificName_2,samplingProtocol,TotAbu)%>%
pivot_wider(names_from=samplingProtocol,values_from=TotAbu, values_fn=sum,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")%>%as.list(.)
Hill.r <- iNEXT(Data.ee.r,q=c(0,1,2),datatype = "abundance")
PrintggiNext(paste(gnm,'_abM',sep=''), Hill.r)
kpv <- c(kpv,'Hill.r')
rm(list=ls()[!ls()%in%kpv])
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
Data.r2 <- Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
Data.ii.r <- Data.r2%>%
select(parentEventID,organismQuantity,scientificName_2)%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate_if(is.numeric,~1*(.>0))%>%column_to_rownames(.,var="scientificName_2")%>%list(.)
Hill.rr<-iNEXT(Data.ii.r,q=c(0,1,2),datatype = "incidence_raw")
names(Hill.rr$iNextEst) <- "Regional"
PrintggiNext(paste(gnm,'_incO',sep=''),Hill.rr)
kpv <- c(kpv,'Hill.rr')
rm(list=ls()[!ls()%in%kpv])
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
clear <- clear_meth_events()
ommt <- clear$ommt; ompv <- clear$ompv
ommt
catnm
names(cov)[names(cov)==catnm]<-'categ'
Data.r2<-Data.r%>%filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
nsp<-unique(Data.r2$parentEventID)
cov.1<-cov%>%select(parentEventID,categ)%>%distinct(parentEventID,.keep_all=T)%>%
filter(parentEventID%in%nsp)
nsp<-length(nsp[!nsp%in%ompv])
Data.ee.o<-Data.r2%>%
select(parentEventID,samplingProtocol,organismQuantity,scientificName_2)%>%
inner_join(.,cov.1, by="parentEventID")%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,4:(nsp+3)]),.keep="unused")%>%
select(categ,samplingProtocol,scientificName_2,TotAbu)%>%
group_split(samplingProtocol)
names(Data.ee.o)<-levels(as.factor(Data.r2$samplingProtocol))
Data.ee.oo<-map(Data.ee.o, function(x){
y<-x%>%select(categ,scientificName_2,TotAbu)%>%
pivot_wider(names_from=categ,values_from=TotAbu,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")
})
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
rlang::last_error()
Data.a.f<-function(catnm = catnm, cov = cov, ompv = ompv, ommt= ommt, data.r = data.r){
names(cov)[names(cov)==catnm]<-'categ'
Data.r2<-Data.r%>%filter(first((!parentEventID%in%ompv))&(!samplingProtocol%in%ommt))
nsp<-unique(Data.r2$parentEventID)
cov.1<-cov%>%select(parentEventID,categ)%>%distinct(parentEventID,.keep_all=T)%>%
filter(parentEventID%in%nsp)
nsp<-length(nsp[!nsp%in%ompv])
Data.ee.o<-Data.r2%>%
select(parentEventID,samplingProtocol,organismQuantity,scientificName_2)%>%
inner_join(.,cov.1, by="parentEventID")%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,4:(nsp+3)]),.keep="unused")%>%
select(categ,samplingProtocol,scientificName_2,TotAbu)%>%
group_split(samplingProtocol)
names(Data.ee.o)<-levels(as.factor(Data.r2$samplingProtocol))
Data.ee.oo<-map(Data.ee.o, function(x){
y<-x%>%select(categ,scientificName_2,TotAbu)%>%
pivot_wider(names_from=categ,values_from=TotAbu,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")
})
return(Data.ee.oo)
}
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
!parentEventID%in%ompv
Data.a.f<-function(catnm = catnm, cov = cov, ompv = ompv, ommt= ommt, data.r = data.r){
names(cov)[names(cov)==catnm]<-'categ'
Data.r2<-Data.r%>%dplyr::filter((!parentEventID%in%ompv)&(!samplingProtocol%in%ommt))
nsp<-unique(Data.r2$parentEventID)
cov.1<-cov%>%select(parentEventID,categ)%>%distinct(parentEventID,.keep_all=T)%>%
filter(parentEventID%in%nsp)
nsp<-length(nsp[!nsp%in%ompv])
Data.ee.o<-Data.r2%>%
select(parentEventID,samplingProtocol,organismQuantity,scientificName_2)%>%
inner_join(.,cov.1, by="parentEventID")%>%
pivot_wider(names_from=parentEventID,values_from=organismQuantity, values_fn=sum,values_fill=0)%>%
mutate(TotAbu=rowSums(.[,4:(nsp+3)]),.keep="unused")%>%
select(categ,samplingProtocol,scientificName_2,TotAbu)%>%
group_split(samplingProtocol)
names(Data.ee.o)<-levels(as.factor(Data.r2$samplingProtocol))
Data.ee.oo<-map(Data.ee.o, function(x){
y<-x%>%select(categ,scientificName_2,TotAbu)%>%
pivot_wider(names_from=categ,values_from=TotAbu,values_fill=0)%>%
column_to_rownames(.,var="scientificName_2")
})
return(Data.ee.oo)
}
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov)
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov, ompv = ompv, ommt = ommt, data.r = data.r)
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov, ompv = ompv, ommt = ommt)
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov, ompv = ompv)
# catnm
Data.ee.oo<-Data.a.f(catnm, cov = cov, ompv = ompv, ommt = ommt)
sessionInfo()
